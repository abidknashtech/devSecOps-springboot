name: DevSecOps Security Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  hardcoded-secrets:
    name: Hard-coded Secrets Check
    runs-on: ubuntu-latest
    needs: [ build ]          # run after build, optional
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # full history helps some scanners

      - name: Set up Python (for custom script)
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install JQ (for parsing gitleaks output)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run Gitleaks with custom config
        uses: zricethezav/gitleaks-action@v2
        with:
          args: detect --source . --config .gitleaks.toml --report-path gitleaks-report.json --redact
        # gitleaks returns non-zero on findings by default -> fails the job

      - name: Show Gitleaks summary
        if: always()
        run: |
          if [ -f gitleaks-report.json ]; then
            echo "Gitleaks findings:"
            jq '.leaks | length as $n | "Findings: \($n)"' gitleaks-report.json || true
          else
            echo "No gitleaks report found."
          fi

      - name: Run custom hardcoded-secret scanner
        run: |
          chmod +x ./scripts/secret_scan.sh
          ./scripts/secret_scan.sh

      - name: Upload results (optional)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: |
            gitleaks-report.json
            secret-scan-findings.txt

  build:
    name: Build & Test Spring Boot
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Build with Maven
        run: mvn clean verify -DskipTests=false

  sast-codeql:
    name: Static Code Analysis (CodeQL)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build code
        run: mvn clean compile -DskipTests=true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  secrets-scan:
    name: Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git -v --redact

  dependency-scan:
    name: Dependency Vulnerability Scan (Trivy FS)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

  container-scan:
    name: Container Image Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t springboot-devsecops:latest .

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'springboot-devsecops:latest'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'
