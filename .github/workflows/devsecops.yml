name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 0. Dependency Scan (OWASP)
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Dependency Check (OWASP)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "SecureSpringBootDemo"
          path: "."
          format: "ALL"
        env:
          # Disable OSS Index to avoid authentication error
          #DEPENDENCY_CHECK_OPTIONS: "--disableOSSIndex"
          # If you want OSS Index enabled, set these secrets:
          OSSINDEX_USERNAME: ${{ secrets.OSS_INDEX_USERNAME }}
          OSSINDEX_PASSWORD: ${{ secrets.OSS_INDEX_PASSWORD }}

  # 1. Secret Scanning (Gitleaks)
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    needs: dependency-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config: gitleaks.toml
          redact: true

      - name: Run custom secret scanner
        if: ${{ always() }}
        run: |
          if [ -f ./scripts/secret_scan.sh ]; then
            chmod +x ./scripts/secret_scan.sh
            ./scripts/secret_scan.sh
          fi

  # 2. Build & Test (Gradle)
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: secret-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon

  # 3. Docker Image Scan (Trivy)
  docker-scan:
    name: Docker Image Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image locally
        run: |
          docker build -t springboot-demo:latest .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'springboot-demo:latest'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

  zap_scan:
    runs-on: ubuntu-latest
    needs: docker-scan   # run only if Docker scan passed
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start Application
        run: |
          docker-compose up -d
          sleep 20  # wait for app to start

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html